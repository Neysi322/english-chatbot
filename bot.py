import logging
import os
import pyttsx3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
from mistral_client import ask_mistral
from whisper_transcriber import transcribe
from test_engine import load_all_questions, evaluate_answer
from TTS.api import TTS

tts = TTS(model_name="tts_models/en/ljspeech/tacotron2-DDC", progress_bar=False, gpu=False)



API_TOKEN = '7958579468:AAF3d-BnWMxwt8ct0LNlWdBQaR16-Wy0JvM'  # –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# user_results —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ user_id
user_results = {}

dialog_state = {}  # {user_id: [history]}


logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(lambda msg: msg.from_user.id in dialog_state)
async def continue_conversation(message: types.Message):
    uid = message.from_user.id
    user_input = message.text.strip()

    # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    if user_input in ["üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò"]:
        dialog_state.pop(uid, None)
        await message.answer("üõë –í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ò–ò.", reply_markup=main_kb)
        return

    dialog_state[uid].append({"role": "user", "content": user_input})

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ prompt –≤ –≤–∏–¥–µ –¥–∏–∞–ª–æ–≥–∞
    prompt = "\n".join([
        f"{'User' if entry['role'] == 'user' else 'AI'}: {entry['content']}"
        for entry in dialog_state[uid][-6:]
    ])
    prompt += "\nAI:"

    try:
        response_raw = ask_mistral(prompt)
        ai_response = response_raw.strip().split("\n")[0].removeprefix("AI:").strip()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
        dialog_state[uid].append({"role": "assistant", "content": ai_response})

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–º
        await message.answer(f"ü§ñ {ai_response}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏
        audio_path = f"response_{uid}.wav"
        tts.tts_to_file(text=ai_response, file_path=audio_path)
        with open(audio_path, "rb") as voice_file:
            await bot.send_voice(chat_id=message.chat.id, voice=voice_file)
        os.remove(audio_path)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–∏–Ω—Ç–µ–∑–∞: {e}")



# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"), KeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"), KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton("üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò"))


def synthesize_offline(text, filename):
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)  # —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
    engine.setProperty('voice', 'english')  # –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≥–æ–ª–æ—Å, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    engine.save_to_file(text, filename)
    engine.runAndWait()

def synthesize_speech(text, filename):
    tts.tts_to_file(text=text, file_path=filename)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n"
        "–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏!",
        reply_markup=main_kb
    )

@dp.message_handler(lambda msg: msg.text == "üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò")
async def start_conversation(message: types.Message):
    uid = message.from_user.id
    dialog_state[uid] = [
        {"role": "system", "content": "You are a friendly English-speaking partner for conversation practice. Keep the dialog simple and natural."},
        {"role": "assistant", "content": "Hi there! How are you today?"}
    ]
    await message.answer("üí¨ Let's talk in English!\n\nü§ñ *Hi there! How are you today?*", parse_mode="Markdown")



@dp.message_handler(lambda msg: msg.text.lower() == "—Å—Ç–æ–ø –¥–∏–∞–ª–æ–≥")
async def stop_conversation(message: types.Message):
    uid = message.from_user.id
    dialog_state.pop(uid, None)
    await message.answer("üõë –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_kb)




@dp.message_handler(lambda msg: msg.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def handle_profile(message: types.Message):
    uid = message.from_user.id
    result = user_results.get(uid)

    if not result:
        await message.answer("‚ÑπÔ∏è –í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üéØ –£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {result['level']}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result['score']} –∏–∑ {result['total']}"
    )


# === –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ ===

@dp.message_handler(lambda msg: msg.text == "üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
async def handle_translate_intro(message: types.Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∏–ª–∏ –ø—Ä–æ–¥–∏–∫—Ç—É–π —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

# === –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç ===

user_data = {}

@dp.message_handler(lambda msg: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" in msg.text)
async def handle_test_start(message: types.Message):
    print("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' –Ω–∞–∂–∞—Ç–∞")  # –æ—Ç–ª–∞–¥–∫–∞
    questions = load_all_questions()

    if not questions or len(questions) != 60:
        await message.answer("üòî –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 60.")
        return

    user_data[message.from_user.id] = {
        "questions": questions,
        "current": 0,
        "score": 0
    }

    await message.answer("üìò –ù–∞—á–∏–Ω–∞–µ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∏–∑ 60 –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–∏—Ä–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!")
    await send_next_question(message)

async def send_next_question(message: types.Message):
    uid = message.from_user.id
    data = user_data[uid]

    if data["current"] >= len(data["questions"]):
        score = data["score"]
        total = len(data["questions"])
        level = determine_level(score, total)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        user_results[uid] = {
            "score": score,
            "total": total,
            "level": level
        }

        await message.answer(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                            
                            f"üéì –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {level}")
        del user_data[uid]
        return


    q = data["questions"][data["current"]]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(q["option_a"], q["option_b"], q["option_c"])
    await message.answer(f"‚ùì {q['question']}", reply_markup=kb)

@dp.message_handler(lambda msg: msg.from_user.id in user_data)
async def handle_test_answer(message: types.Message):
    uid = message.from_user.id
    data = user_data[uid]
    q = data["questions"][data["current"]]
    correct = evaluate_answer(message.text, q["correct"])

    if correct:
        data["score"] += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct']}")

    data["current"] += 1
    await send_next_question(message)

def determine_level(score, total):
    percent = score / total
    if percent < 0.2:
        return "A1"
    elif percent < 0.35:
        return "A2"
    elif percent < 0.5:
        return "B1"
    elif percent < 0.7:
        return "B2"
    elif percent < 0.9:
        return "C1"
    else:
        return "C2"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ===

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    uid = message.from_user.id

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = await bot.get_file(message.voice.file_id)
        input_path = "voice.ogg"
        output_path = "voice.wav"
        await bot.download_file(file_info.file_path, input_path)
        os.system(f"ffmpeg -y -i {input_path} -ar 16000 -ac 1 {output_path}")

        recognized_text = transcribe(output_path).strip()

        if not recognized_text:
            await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        # === üìå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –î–∏–∞–ª–æ–≥–∞ —Å –ò–ò ===
        if uid in dialog_state:
            dialog_state[uid].append({"role": "user", "content": recognized_text})

            prompt = "\n".join([
                f"{'User' if x['role'] == 'user' else 'AI'}: {x['content']}"
                for x in dialog_state[uid][-6:]
            ]) + "\nAI:"

            ai_response = ask_mistral(prompt).strip().split("\n")[0].removeprefix("AI:").strip()
            dialog_state[uid].append({"role": "assistant", "content": ai_response})

            await message.answer(f"ü§ñ {ai_response}")

            audio_path = f"response_{uid}.wav"
            tts.tts_to_file(text=ai_response, file_path=audio_path)
            with open(audio_path, "rb") as voice_file:
                await bot.send_voice(chat_id=message.chat.id, voice=voice_file)
            os.remove(audio_path)

        else:
            # === üß† –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ ===
            await message.answer(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}")
            await message.answer("ü§ñ –ü–µ—Ä–µ–≤–æ–∂—É...")

            prompt = f"""
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã).
–í–∞–∂–Ω–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
- –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∏–¥–∏–æ–º–∞ –∏–ª–∏ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º, –ø–æ–¥–±–µ—Ä–∏ –∞–Ω–∞–ª–æ–≥.
- –î–æ–±–∞–≤—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã.
- –ü—Ä–∏–≤–µ–¥–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ.
- –ü—Ä–∏–º–µ—Ä—ã –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–§—Ä–∞–∑–∞:
\"\"\"{recognized_text}\"\"\""""

            response = ask_mistral(prompt)
            await message.answer(response)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ===

@dp.message_handler(lambda msg: msg.text not in ["üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"], content_types=types.ContentType.TEXT)
async def handle_translation(message: types.Message):
    user_text = message.text.strip()
    await message.answer("ü§ñ –ü–µ—Ä–µ–≤–æ–∂—É —á–µ—Ä–µ–∑ Mistral...")

    prompt = f"""
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –Ω–æ—Å–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã).
–í–∞–∂–Ω–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
- –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∏–¥–∏–æ–º–∞ –∏–ª–∏ —Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º, –ø–æ–¥–±–µ—Ä–∏ –∞–Ω–∞–ª–æ–≥.
- –î–æ–±–∞–≤—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã.
- –ü—Ä–∏–≤–µ–¥–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ.
- –ü—Ä–∏–º–µ—Ä—ã –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–§—Ä–∞–∑–∞:
\"\"\"{user_text}\"\"\"
"""
    try:
        response = ask_mistral(prompt)
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)